h2. Quick Start

Governator is mostly transparent. Use Guice as you normally would but with enhanced features. The major difference is that you now create the Injector through Governator. 

```java
Injector    injector = LifecycleInjector.builder()
    .withModules(yourModules).createInjector();
```

By creating your Injector this way various special annotations (@PostConstruct, etc.) will be processed. 

h2. Just a Bit More

By adding two more lines of code a number of other Governator enhancements are enabled.

```java
LifecycleManager    manager = injector.getInstance(LifecycleManager.class);
manager.start();
```

Starting the Governator LifecycleManager causes field validation to be processed and the Governator @WarmUp methods to get executed.

When your application is shutting down, stop the LifecycleManager so that @CoolDown and @PreDestroy methods are executed.

```java
manager.close();
```

h2. AutoBindSingleton

While Guice has some support for automatic binding (Just in Time - JIT - binding), it's functionality is limited in that the instance has to be injected into some other object so that Guice is aware of it. Governator normalizes automatic binding via classpath scanning and the @AutoBindSingleton annotation.

Classpath scanning is done in a manner similar to "Jersey":http://jersey.java.net/ scanning. You specify a set of base packages and the Classpath is scanned for matching classes. 

```java
LifecycleInjector.builder().usingBasePackages(yourPackages)
```

All classes in the specified packages (searched recursively) annotated with @AutoBindSingleton are bound as Guice eager singletons. This enables new behavior for Guice applications: classes that bind and instantiate without having to be injected/referenced by any other class.

h2. Next Steps

Governator has many more features than the above. See the feature specific wikis to learn more detail about the above features or additional features:

* [[Bootstrapping]]
* [[Lifecycle Management]]
* [[Warm Up and Cool Down]]
* [[Autobinding]]
* [[Configuration Mapping]]
* [[Field Validation]]
