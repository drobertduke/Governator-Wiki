Governator simplifies writing applications with composable libraries.  This is an alternative to AutoBindSingleton where a library defines complex bindings and its eager singletons in a Guice module.  In addition, a library Module may define additional Module dependencies that are to be pulled in.  Governator accomplishes in the bootstrap phase by having the application provide its direct dependencies as a list of Module classes.  Governator will handle installing the modules and pulling in any Module transitive dependencies. 

h4. Usage

An application is likely to define a single module class which includes all of its direct dependent modules. This module can be added by calling builder.withAdditionalModuleClasses(MyApplicationModule.class).  Note that more than one top level module can be added.

```java
// This application has a dependency on LibraryAModule and LibraryBModule. 
// It will pull in LibraryCModule transitively.  
@Singleton
public class MyApplicationModule extends AbstractModule {
   @Inject
   public ApplicationModule(LibraryAModule libA, LibraryBModule libB) {
   }
   ...
}

@Singleton
public class LibraryAModule extends AbstractModule {
   @Inject
   public LibraryAModule(LibraryCModule libC) {
   }
}

@Singleton
public class LibraryBModule extends AbstractModule {
   @Inject
   public LibraryBModule(LibraryCModule libC) {
   }
}

LifecycleInjector.builder()
   .withAdditionalModuleClasses(ApplicationModule.class)
   .build().createInjector();
```

h4. Overriding modules

An entire module can be overridden by specifying a binding to the overriding module in a BootstrapModule.

```java
LifecycleInjector.builder()
   .withAdditionalBoostrapModule(new BootstrapModule() {
       public void configure(BootstrapBinder binder) {
           bind(LibraryCModule.class).to(AlternativeLibraryCModule.class);
       }
   })
   .withAdditionalModuleClasses(ApplicationModule.class);
```

