h2. Overview

Governator simplifies Guice module transitive dependencies using the @Modules annotation as an alternative to Guice's binder.install().  Using @Modules a module may specify it's dependent module classes instead of module instances supported by binder.install(). 

h2.  Defining module dependencies

An application is likely to define a single module class which includes all of its direct dependent modules. This module can be added by calling builder.withAdditionalModuleClasses(MyApplicationModule.class).  This top level module's Guice module dependencies are specified using the @Modules annotation.
 
```java
// This application has a dependency on LibraryAModule and LibraryBModule. 
// It will pull in LibraryCModule transitively.  
@Modules(include={LibraryAModule.class, LibraryBModule.class}
public class MyApplicationModule extends AbstractModule {
    public void configure() { 
        // Bindings for MyApplication
    }
}

@Modules(include={LibraryCModule.class})
public class LibraryAModule extends AbstractModule {
    public void configure() { 
        // Bindings for LibraryA
    }
}

@Modules(include={LibraryCModule.class})
public class LibraryBModule extends AbstractModule {
    public void configure() { 
        // Bindings for LibraryB
    }
}

public class LibraryCModule extends AbstractModule {
    public void configure() { 
        // Bindings for LibraryC
    }
}

// When creating the injector it is only necessary to specify the top level module
LifecycleInjector.builder()
   .withAdditionalModuleClasses(ApplicationModule.class)
   .build().createInjector();
```

h2. Overriding bindings

A complex module dependency graph may eventually create conflicting bindings.  Governator installs all bindings in module dependency order (derived from the @Modules annotations) just like Guice instantiates object in dependency order.  This property makes it possible to have each parent module override bindings from its transitive dependencies.  This feature is disabled by default by can be turned on like this,

```java
LifecycleInjector.builder()
    .withModuleTransformer(new OverrideAllDuplicateBindings())
    ...
```

