There is much more to an object's lifecyle than just allocation via <code>new</code>. In particular, there is an important anti-pattern regarding letting <code>this</code> "escape" from a constructor. This page "describes the problem":http://www.javapractices.com/topic/TopicAction.do?Id=252 in detail.

In Governator, an object can go through a number of steps in its lifecycle. Annotations are available to define methods for these steps. The steps are:

<pre>
Allocation (via Guice)
     |
     v
Pre Configuration
     |
     v
Configuration
     |
     V
Post Construction
     |
     V
Validation and Warm Up
</pre>

At the end of the application, the object goes through this step:

<pre>
Pre Destroy
</pre>

Here are the annotations available:

|_.Annotation|_.Target|_.Description|
|@PreConfiguration|Methods|Called prior to [[Configuration Mapping]]|
|@PostConfiguration|Methods|Called after [[Configuration Mapping]]|
|@Min, @Max, etc.|Fields|Processed when LifecycleManager.start() is called. See [[Field Validation]] for details.|
|@WarmUp|Methods|Called when LifecycleManager.start() is called. Executed in parallel in the background. See [[Warm Up]] for details.|
|@PreDestroy|Methods|Called when LifecycleManager.close() is called.|