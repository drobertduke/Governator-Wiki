Governator creates two Guice injectors: an internal "bootstrapping" Injector and the main application Injector. The main Injector is created when you call <code>LifecycleInjectorBuilder.createInjector()</code>. The bootstrapping injector is created internally by Governator.

h3. Why two Injectors?

Governator features introduce recursive dependencies. [[configuration mapping]] and the LifecycleManager instance require <code>ConfigurationProvider</code> instances. These instances are needed as the main Injector is being created (i.e. as Guice is creating instances). 

h3. Bootstrapping Steps

Bootstrapping is part of the classpath scanning step:

* ConfigurationProvider classes annotated with @AutoBindSingleton are detected and bound into the bootstrap Injector.
* Application specific bootstrap binding is done via the specified bootstrap module (if any).

You can specify your own bootstrap bindings if needed by specifying a bootstrap module:

```java
LifecycleInjector.builder().withBootstrapModule(yourBootstrapModule)
```

The bootstrap module is passed a special Guice Binder that has an additional method for binding  ConfigurationProviders. Always use this special method:

```java
    /**
     * Use this to bind {@link ConfigurationProvider}s. Do NOT use standard Guice binding.
     *
     * @return configuration binding builder
     */
    public LinkedBindingBuilder<ConfigurationProvider> bindConfigurationProvider();
```

h3. LifecycleListener

You can bind a LifecycleListener in the bootstrap module. See the [[LifecycleListener]] wiki for details.

h3. Completion

At the end of Bootstrapping, Governator creates the bootstrap injector and gets the LifecycleManager instance which manages the main injection phase. Any bound configuration providers are injected into the LifecycleManager.