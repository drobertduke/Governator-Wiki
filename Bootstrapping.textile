Governator creates two Guice injectors: an internal "bootstrapping" Injector and the main application Injector. The main Injector is created when you call <code>LifecycleInjectorBuilder.createInjector()</code>. The bootstrapping injector is created internally by Governator.

h3. Why Two Injectors?

Several Governator features have recursive dependencies. [[Configuration Mapping]] requires <code>ConfigurationProvider</code> instances. [[Auto Binding]] arguments require <code>AutoBindProvider</code> instances. These instances are needed as the main Injector is being created (i.e. as Guice is creating instances). 

h3. Bootstrapping Steps

Bootstrapping is part of the classpath scanning step:

* ConfigurationProvider classes annotated with @AutoBindSingleton are detected and bound into the bootstrap Injector.
* AutoBindProvider classes must be bound in the bootstrapping step
* Application specific bootstrap binding (if any) is done via the bootstrap module

```java
LifecycleInjector.builder().withBootstrapModule(yourBootstrapModule)
```

The bootstrap module is passed a special Guice Binder that has an additional method for binding  ConfigurationProviders. Always use this special method:

```java
    /**
     * Use this to bind {@link ConfigurationProvider}s. Do NOT use standard Guice binding.
     *
     * @return configuration binding builder
     */
    public LinkedBindingBuilder<ConfigurationProvider> bindConfigurationProvider();
```

h3. Module transformations

The {@link ModuleTransform} provides a mechanism to apply a final transformation to all of the modules that will be installed on the main injector.  These transformations can include filtering or augmenting of bindings in the modules.  Several transformation recipes from Guice's wiki are included: {@link StripStaticInjections} and {@link WarnAboutStaticInjections}.  Binding overrides are also implemented using this mechanism (Coming soon...)

h3. Post injector creation action

The {@link PostInjectorAction} provides a mechanism to specify an operation to perform immediately after the injector is created but before it is returned.  This service is provided as part of Guice since it makes it easy to capture common post injector creation operation.  For example, log a report on all bindings {@link BindingReport}, create all bound singletons eagerly (for DEVELOPMENT mode) {@link CreateAllBoundSingletons}, auto-start the lifecycle manager {@link LifecycleManagerStarter}, generate a dot diagram {@link GrapherAction}, etc...

h3. LifecycleListener

You can bind a LifecycleListener in the bootstrap module. See the [[LifecycleListener]] wiki for details.

h3. AutoBindProvider

You must bind any AutoBindProvider instances in the bootstrap module. See the [[Auto Binding]] wiki for details.

h3. Completion

At the end of Bootstrapping, Governator creates the bootstrap injector and gets the LifecycleManager instance which manages the main injection phase. Any bound configuration providers, lifecycle listeners and auto bind providers are injected into the LifecycleManager.