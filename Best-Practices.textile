This page provides examples and best practices guidelines to follow when writing DI friendly code

h2. Best Practices

h3. Modules should be side effect free

Don't allocate data or have any conditional logic in a Guice module.  

h3. Don't inject the Injector

Unless you are writing a generic framework most situations in which you want to Inject the injector can be solved by writing a Provider.

h3. Be careful with AutoBindSingleton

When writing libraries keep in mind that classpath scanning of AutoBindSingleton classes will result in those classes being created eagerly when the injector is created.  Too broad a set of a packages to scan can result in unwanted singletons being created. 

h3. @Singleton Provider<T> is not @Singleton T

Annotating a Provider<T> with @Singleton ensures that the Provider is a singleton and not the type T itself.  Every injection or call to .get() will return a new instance of T.  To make T a singleton either do bind(T.class).toProvider(TProvider.class).in(Scopes.Singleton) or implement SingletonProvider<T> instead of Provider<T>. 
 
h2. Examples

h3. Configuration driven binding

The following example shows how to use multi bindings to create an extensible mechanism for constructing a polymorphic type.  Note that new implementation types can be added simply by adding another binding to the map binder.  This can be done in any Guice module

```java
public class FooProvider implements Provider<Foo> {
   @Configuration(value="foo.type")
   private String type;

   private final Map<String, Provider<Foo>> providers;
  
   @Inject
   FooProvider(Map<String, Provider<Foo>> providers) {
       this.providers = providers;
   }

   public Foo get() {
      return providers.get(type);
   }
}

public class FooModule extends AbstractModule { 
   public void configure() { 
      MapBinder<String, Foo> foos = MapBinder.newMapBinder(binder(), String.class, Foo.class);
      foos.addBinding("bar").to(FooBar.class);
      foos.addBinding("goo").to(FooGoo.class);
   }
}
```

h3. Plugin architecture using multi-bindings

Coming soon..

h3. Interfaces first

For injectable classes first create an interface and specify a default implementation using @ImplementedBy.  This will make it easier to override the implementation in a binding.  Note that binding in a guice module overrides @ImplementedBy without complaining about existing bindings.

