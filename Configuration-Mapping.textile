As part of initializing an object, Governator can assign configuration values to object fields. To use this feature, you must bind an instance that implements ConfigurationProvider in the bootstrap phase. Governator provides a few default implementations to use. Then, annotate fields with @Configuration.

h2. ConfigurationProvider

The ConfigurationProvider is used to provide configuration values from configuration names as specified by @Configuration annotations. Governator bundles three implementations that you can use: 

|_.Class|_.Description|
|SystemConfigurationProvider|Returns System properties via <code>System.getProperty()</code>|
|PropertiesConfigurationProvider|Returns values from a Properties object|
|ArchaiusConfigurationProvider|Returns values using Netflix's "Archaius":https://github.com/Netflix/archaius|

Additionally, CompositeConfigurationProvider can be used to chain ConfigurationProviders together.

There are two ways to identify the ConfigurationProvider to Governator:

* Annotate the ConfigurationProvider with @AutoBindSingleton (making sure it is in the set of packages passed to the classpath scanner).
* Bind the ConfigurationProvider in the bootstrap module.

Here is an example of binding in the bootstrap module:

```java
LifecycleInjector.builder()
    .withBootstrapModule
    (
        new BootstrapModule()
        {
            @Override
            public void configure(Binder binder, RequiredAssetBinder requiredAssetBinder)
            {                            
               binder.bindConfigurationProvider().to(MyProvider.class);
            }
        }
    )
```

h3. @PreConfiguration

You can annote methods to get called prior to configuration mapping. E.g.:

```java
@PreConfiguration
public void myConfigurationLoader()
{
   // gets called prior to configuration mapping and prior to PostConstruct methods
}
```

h2. @Configuration

Fields annotated with @Configuration will get assigned configuration values based on the type of the field and the value set in the annotation. Here's an example:

```java
@Configuration("configs.qty.things")
private int   numberOfThings = 10;
```

For the above, Governator will call ConfigurationProvider.has("configs.qty.things") (note the argument is actually a ConfigurationKey - see below). If it returns false, "numberOfThings" will stay set to 10 - i.e. 10 is the default value. If it returns true, "numberOfThings" is assigned the value returned by ConfigurationProvider.getInteger("configs.qty.things"). If "numberOfThings" was a String, ConfigurationProvider.getString("configs.qty.things") would be called, etc.

h3. ConfigurationKey

Each method of the ConfigurationProvider takes a <code>ConfigurationKey</code> as an argument as opposed to a simple string. The ConfigurationKey enables a convention for providing variables within the @Configuration value. Governator will parse the value into tokens. Tokens can be either a literal value or a variable substitution. Variables are specified as <code>${variable-name}</code>. The ConfigurationKey has a method to apply variables and return the applied key:

```java
public String getKey(Map<String, String> variableValues);
```

The variableValues maps a variable name to its value. Some examples:

|_.Value|_.variableValues|_.Actual Key|
|${stage}.server|"stage" -> "test"|test.server|
|password.${user}.${month}|"user" -> "jz", "month" -> "oct"|password.jz.oct|

ConfigurationKey also has a method to get the list of variable names present in the @Configuration value.

h2. Configuration Documentation

Governator provides a documentation mechanism for configuration. When LifecycleManager.start() is called (after configuration assignments) Governator will log detailed information about the configuration values used in your application. In support of this, you should specify descriptive documentation in your @Configuration annotations via the optional documentation property. E.g.

```java
@Configuration
(
    value = "configs.qty.things", 
    documentation = "This controls the number of things used."
)
private int   numberOfThings = 10;
```

The configuration logging looks like this:

<pre>
PROPERTY     FIELD               DEFAULT    VALUE           DESCRIPTION           
prop.name.1  com.foo.Bar#aBool   false      true            This is a boolean     
other.prop   com.foo.Bar#xyz     something  another thing   This does something
</pre>