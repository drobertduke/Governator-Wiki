As part of initializing an object, Governator can assign configuration values to object fields. To use this feature, you must bind an instance that implements ConfigurationProvider (Governator provides a few default implementations to use) and annotate fields with @Configuration.

h2. ConfigurationProvider

The ConfigurationProvider is used to provide configuration values from configuration names as specified by @Configuration annotations. Governator bundles two implementations that you can use: SystemConfigurationProvider and PropertiesConfigurationProvider. SystemConfigurationProvider returns System properties (via <code>System.getProperty()</code>). PropertiesConfigurationProvider returns values from a Properties object (via <code>Properties.getProperty()</code>). Additionally, CompositeConfigurationProvider can be used to chain ConfigurationProviders together.

There are two ways to identify the ConfigurationProvider to Governator:

* Annotate the ConfigurationProvider with @AutoBindSingleton (making sure it is in the set of packages passed to the classpath scanner).
* Bind the ConfigurationProvider in the bootstrap module.

Here is an example of binding in the bootstrap module:

```java
LifecycleInjector.builder()
    .withBootstrapModule
    (
        new BootstrapModule()
        {
            @Override
            public void configure(Binder binder, RequiredAssetBinder requiredAssetBinder)
            {                            
               binder.bind(ConfigurationProvider.class).to(MyProvider.class).asEagerSingleton();
            }
        }
    )
```

h2. @Configuration

Fields annotated with @Configuration will get assigned configuration values based on the type of the field and the value set in the annotation. Here's an example:

```java
@Configuration("configs.qty.things")
private int   numberOfThings = 10;
```

For the above, Governator will call ConfigurationProvider.has("configs.qty.things"). If it returns false, "numberOfThings" will stay set to 10 - i.e. 10 is the default value. If it returns true, "numberOfThings" is assigned the value returned by ConfigurationProvider.getInteger("configs.qty.things"). If "numberOfThings" was a String, ConfigurationProvider.getString("configs.qty.things") would be called, etc.
